version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:13-alpine
    container_name: joineazy_db
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-joineazy_feedback}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Server
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: joineazy_server
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=5000
      - JWT_SECRET=${JWT_SECRET:-joineazy_super_secret_key}
      - JWT_EXPIRES_IN=7d
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-joineazy_feedback}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
    ports:
      - "5000:5000"
    depends_on:
      - db
    restart: on-failure
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    volumes:
      - ./server:/app
      - /app/node_modules

  # Frontend React App
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: joineazy_client
    environment:
      - REACT_APP_API_URL=http://localhost:5000/api
      - WDS_SOCKET_PORT=0
      - CHOKIDAR_USEPOLLING=true
    ports:
      - "3000:3000"
    depends_on:
      - server
    restart: on-failure
    volumes:
      - ./client:/app
      - /app/node_modules

volumes:
  postgres_data: